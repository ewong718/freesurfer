// generated by Fast Light User Interface Designer (fluid) version 1.0110

#ifndef kvlImageThresholdingConsoleGUI_h
#define kvlImageThresholdingConsoleGUI_h
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include "kvlImageViewer.h"
#include <FL/Fl_Value_Slider.H>
#include <FL/Fl_Group.H>
#include <FL/Fl_Round_Button.H>
#include <FL/Fl_Browser.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Check_Button.H>

class kvlImageThresholdingConsoleGUI {
public:
  kvlImageThresholdingConsoleGUI();
  Fl_Double_Window *m_Window;
private:
  void cb_m_Window_i(Fl_Double_Window*, void*);
  static void cb_m_Window(Fl_Double_Window*, void*);
public:
  kvl::ImageViewer *m_ImageViewer;
private:
  void cb_m_ImageViewer_i(kvl::ImageViewer*, void*);
  static void cb_m_ImageViewer(kvl::ImageViewer*, void*);
public:
  Fl_Value_Slider *m_OverlayOpacity;
private:
  void cb_m_OverlayOpacity_i(Fl_Value_Slider*, void*);
  static void cb_m_OverlayOpacity(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_CoronalSliceNumber;
private:
  void cb_m_CoronalSliceNumber_i(Fl_Value_Slider*, void*);
  static void cb_m_CoronalSliceNumber(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_SagittalSliceNumber;
private:
  void cb_m_SagittalSliceNumber_i(Fl_Value_Slider*, void*);
  static void cb_m_SagittalSliceNumber(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_AxialSliceNumber;
private:
  void cb_m_AxialSliceNumber_i(Fl_Value_Slider*, void*);
  static void cb_m_AxialSliceNumber(Fl_Value_Slider*, void*);
public:
  Fl_Round_Button *m_ViewOne;
private:
  void cb_m_ViewOne_i(Fl_Round_Button*, void*);
  static void cb_m_ViewOne(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_ViewTwo;
private:
  void cb_m_ViewTwo_i(Fl_Round_Button*, void*);
  static void cb_m_ViewTwo(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_ViewFour;
private:
  void cb_m_ViewFour_i(Fl_Round_Button*, void*);
  static void cb_m_ViewFour(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_ViewThree;
private:
  void cb_m_ViewThree_i(Fl_Round_Button*, void*);
  static void cb_m_ViewThree(Fl_Round_Button*, void*);
public:
  Fl_Round_Button *m_ViewFive;
private:
  void cb_m_ViewFive_i(Fl_Round_Button*, void*);
  static void cb_m_ViewFive(Fl_Round_Button*, void*);
public:
  Fl_Browser *m_ImageToThreshold;
private:
  void cb_m_ImageToThreshold_i(Fl_Browser*, void*);
  static void cb_m_ImageToThreshold(Fl_Browser*, void*);
public:
  Fl_Browser *m_ImageToMask;
private:
  void cb_m_ImageToMask_i(Fl_Browser*, void*);
  static void cb_m_ImageToMask(Fl_Browser*, void*);
public:
  Fl_Value_Slider *m_LowerThreshold;
private:
  void cb_m_LowerThreshold_i(Fl_Value_Slider*, void*);
  static void cb_m_LowerThreshold(Fl_Value_Slider*, void*);
public:
  Fl_Value_Slider *m_UpperThreshold;
private:
  void cb_m_UpperThreshold_i(Fl_Value_Slider*, void*);
  static void cb_m_UpperThreshold(Fl_Value_Slider*, void*);
  void cb_Mask_i(Fl_Button*, void*);
  static void cb_Mask(Fl_Button*, void*);
  void cb_Show_i(Fl_Check_Button*, void*);
  static void cb_Show(Fl_Check_Button*, void*);
  void cb_Write_i(Fl_Button*, void*);
  static void cb_Write(Fl_Button*, void*);
public:
  virtual ~kvlImageThresholdingConsoleGUI();
  virtual void SetOverlayOpacity( float overlayOpacity );
  virtual void SetSliceLocation( unsigned int, unsigned int, unsigned int );
  virtual void ShowSelectedView();
  virtual void SetImageToThreshold( int );
  virtual void SetImageToMask( int );
  virtual void SetThresholds( float, float );
  virtual void MaskImage();
  virtual void ShowInverseMask( bool );
  virtual void WriteMask();
};
#endif
