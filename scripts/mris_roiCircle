#!/bin/bash

# "include" the set of common script functions
source common.bash

# Defaults
declare -i Gi_verbose=0
declare -i Gi_distance=-1                # default radial distance in mm
declare -i Gb_terminateEngine=1

G_VERTEXFILE="-x"
G_VERTEXLIST="-x"
G_SUBJECT="-x"
G_SURFACE="-x"
G_HEMI="-x"

G_OPTIONSFILE="options.txt"

G_SYNOPSIS="

 NAME 

 	mris_roiCircle
        $Id: mris_roiCircle,v 1.6 2011/09/20 12:45:12 rudolph Exp $

 SYNOPSIS

 	mris_roiCircle          -l <vertexList>			\\
				-r <radialDistance>		\\
 				[-f <fileNameOfVertices>]	\\
 				[-S <subject>]	  	        \\
                                [-s <surfaceFile>]        	\\
                                [-h <hemi>]               	\\
                                [-l <vertexList>]		\\
				[-o <optionsFile>]		\\
				[-t]                    	\\
                                [-v <verbosity> 

 DESCRIPTION

 	'mris_roiCircle' is a simple bash-script that paints circular
        ROIs about vertices of interest on a FreeSurfer surface.

        The heavy lifting is actually performed by the 'mris_pmake' engine,
        which in turn is controlled by an intermediary script, 'dsh'. 
        
        'mris_roiCircle' simply creates a dsh-script and passes this to
        'dsh', which in turn spawns the actual engine.
	
 USAGE
 	
 	The actual program that calulates the ROIs uses an options file 
	that defines the subject, hemisphere, and surface to process. Once
	this options file exists, there is no need to pass the subject, 
	hemisphere, and surface again.
	
	So, typically, one would first run:
	
		mris_roiCircle 	-S <subject> -s <surface> -h <hemi> 	\\
				-l <vertexList> -d <distance>

	Which will create an options file, and run the engine. Any subsequent
	ROIs on the same subject, surface, and hemi can be simply run with
	
		mris_roiCircle 	-l <newVertexList> -d <newDistance>
		
	and the existing options file will be define the subject, surface, and
	hemi. If any of <subject>, <surface>, and <hemi> are specified and 
	differ from the existing options file, the script will ask the user
	if a new options file should be generated, or the old values used.
	
 OPTIONS
 
        -v <verbosity> (Optional)
        Verbosity level.

 	-l <vertexList> (Either one of '-l ...' or '-f ...' is required)
	A list of vertices about which to generate radial distances. Enclose
        in quotes, and separate with a single space.

        -f <vertexFile> (Either one of '-l ...' or '-f ...' is required)
        A file containing a list of vertices about which to generate
        radial distances. Can be used in conjunction with '-v <vertexList>.
	
	-r <radialDistance> (Required)
	The radial distance about each vertex in <vertexList>.

       -S <subject> (Required)
        The FreeSurfer subject to evaluate. Note the flag is capital 'S'.
        
        -s <surfaceFile> (Required)
        The FreeSurfer mesh surface to read. Note the flag is lowercase 's'.
        
        -h <hemi> (Required)
        The hemisphere to process.
 
	-o <optionsFile> (Optional, default $G_OPTIONSFILE)
	The options file to generate, used by 'dsh' and by 'mris_pmake'.
	Best to leave unchanged.
	
	-t (Optional -- for advanced users only!)
	Do not terminate engine on exit. By default, the engine will exit when 
        this script finishes. For 99% of use cases, this is valid. If however 
        the engine is to remain resident after this script finishes, pass the 
        '-t'. 

 PRECONDITIONS
 
        o FreeSurfer 'dev' environment.
        o Defined SUBJECTS_DIR
        
 POSTCONDITIONS

 	o A set of FreeSurfer label files will be created, one for
	  each seed vertex. 

 EXAMPLE
 
    Assuming a subject called <subject>, generate on the smoothwm surface
    patches of 10mm in diameter around vertices 10000, 20000, and 30000:
 
 	$>mris_circleROI -S <subject> -s smoothwm -h lh 	\\
 			 -l \"10000 20000 30000\" 		\\
			 -d 10
			 
    This will generate three label files called:

	o <subject>:lh-smoothwm-v-10000-r-10.label
	o <subject>:lh-smoothwm-v-20000-r-10.label
	o <subject>:lh-smoothwm-v-30000-r-10.label
		 	
 HISTORY
 
 15 January 2010
 o Resurrection and streamlining from earlier scripts.

 29 January 2010
 o Final testing / alpha release.

 15 August 2011
 o More descriptive output file naming.

 August 2011
 o Check on existing options.txt file and, if exists,
   more intelligently compare with command line options
   if passed.

 September 2011
 o GNU vs BSD sed annoyances. 
"

###\\\
# Global variables
###///
SELF=`basename $0`
PID=$$
DSHSCRIPT="/tmp/vertexArea.dsh.$PID"

let Gb_subjectSpecified=0
let Gb_surfaceSpecified=0
let Gb_hemiSpecified=0

# Actions
A_subject="checking on the <subject>"
A_subjectSpec="checking on command line variables"
A_hemiSpec="checking on the hemisphere flag"
A_surface="checking on the <surface>"
A_surfaceSpec="checking on command line variables"
A_fileCheck="checking for prerequisite files" 
A_optionsCreate="running initial options-pass"
A_vertexFileCheck="checking on the passed <vertexFile>" 
A_vertexList="generating the internal list of ROI vertex seeds"
A_distanceCheck="checking on radial distance"
A_dshScript="executing the 'dsh' script"

# Error messages
EM_subject="I couldn't seem to access the subject dir."
EM_subjectSpec="I don't think you specified a correct '-S <subject>'."
EM_hemiSpec="I don't think you specified a correct '-h <hemi>'."
EM_surface="I couldn't seem to access the surface file."
EM_surfaceSpec="I don't think you specified a correct '-s <surface>'."
EM_optionsCreate="I detected a failure with 'mris_pmake'."
EM_fileCheck="I couldn't find a required file."
EM_vertexFileCheck="I couldn't access the file. Does it exist? Permission?" 
EM_vertexList="it seems as if this list is empty."
EM_distanceCheck="did you specify a proper '-d <radialDistance>'?"
EM_dshScript="some error occured with the 'dsh' call."

# Error codes
EC_subject="1"
EC_subjectSpec="11"
EC_hemiSpec="2"
EC_surface="3"
EC_surfaceSpec="33"
EC_optionsCreate="4"
EC_fileCheck="10"
EC_vertexFileCheck="20" 
EC_vertexList="21"
EC_distanceCheck="30"
EC_dshScript="40"

###\\\
# Function definitions
###///

function dshScript_generate
{
        #
        # ARGS
        #       $1              in              the seed vertex
        #       $2              in              distance
        #
        # DESC
        #       Generates a dsh script that produces a region label
        #       which is centered on a passed seed vertex and extends
        #       for a given distance.
        #
        
        local   seed=$1
        local   distance=$2
                
        echo "SURFACE active set 0"                             > $DSHSCRIPT
        echo "LABEL activeSurface singleVertexSet $seed"        >> $DSHSCRIPT
        echo "LABEL ply set $distance"                          >> $DSHSCRIPT
        echo "LABEL ply functionAssign 2"                       >> $DSHSCRIPT
        echo "LABEL ply do"                                     >> $DSHSCRIPT
        echo "LABEL ply save ${SUBJECT_O}:${HEMI_O}-${SURFACE_O}-v-${seed}-r-" \
        	>> $DSHSCRIPT
}

function optionsFile_askRegenerate
{
        #
        # ARGS
        #       $1              in              the trigger parameter
	#					that caused the inconsistency;
	#					one of either "subject", 
	#					"surface", or "hemi".
        #
        # DESC
	#	If the <subject>, <surface>, or <hemi> has been specified
	#	on the command line, and if an options file exists that contains
	#	a different value for any of those, the user is asked if they'd
	#	like to create a new options file.
        #
        
        local   param=$1
        
        case "$param" 
        in 
		"subject")	COMVAL=$G_SUBJECT
				FILEVAL=$SUBJECT_O	;;
		"surface")	COMVAL=$G_SURFACE
				FILEVAL=$SURFACE_O	;;
		"hemi")		COMVAL=$G_HEMI
				FILEVAL=$HEMI_O		;;
        esac

	# Need to turn verbosity on if we get to this point.
	exec 1>&6 6>&-
		
	echo ""
	echo "A mismatch was detected between the existing $param in the"
	echo "options file, and a command line override."
	echo ""
	echo -e "\tCommand line: $COMVAL"
	echo -e "\tOptions file: $FILEVAL"
	echo ""
	echo "The options file value is what is used by 'mris_pmake'."
	echo "If you wish to use <$COMVAL> instead, a new options file"
	echo "needs to be generated."
	echo ""
	echo "Do you want a new options file?"
	echo "Say 'Y' (or 'y') if you'd like to use $COMVAL for the $param"
	echo "otherwise, hit any other key."
	echo ""
	echo "If you say 'Y', a new options file will be generated with:"
	printf "%-15s%-65s\n" "<subject>" "[ $G_SUBJECT ]"
	printf "%-15s%-65s\n" "<surface>" "[ $G_SURFACE ]"
	printf "%-15s%-65s\n" "<hemi>"	"[ $G_HEMI ]"
	echo ""
	echo "If you don't say 'Y', the labels will be generated with:"
	printf "%-15s%-65s\n" "<subject>" "[ $SUBJECT_O ]"
	printf "%-15s%-65s\n" "<surface>" "[ $SURFACE_O ]"
	printf "%-15s%-65s\n" "<hemi>"	"[ $HEMI_O ]"
	echo ""
	printf "Should I generate a new options file? ([y]es/[n]o/[a]bort) "
	read reply
	if [[ "$reply" == "a" ]] ; then shut_down 10 ; fi
	if [[ "$reply" == "Y" || "$reply" == "y" ]] ; then
	    return 1
	else
	    return 0
	fi
}

function optionsFile_create
{
    if (( ! Gb_subjectSpecified )) ; 	then fatal subjectSpec 	; fi
    if (( ! Gb_surfaceSpecified )) ; 	then fatal surfaceSpec 	; fi
    if (( ! Gb_hemiSpecified )) ; 	then fatal hemiSpec 	; fi
    
    lprint "Generating an options file, $G_OPTIONSFILE..."
    MRIS_PMAKE="mris_pmake --subject $G_SUBJECT --hemi $G_HEMI 	\
    		--surface0 $G_SURFACE 				\
    		--mpmProg NOP --mpmOverlay NOP >/dev/null"
    eval "$MRIS_PMAKE"
    ret_check $? || fatal optionsCreate
}

### Main:

###\\\
# Process command options
###///

while getopts s:S:h:v:l:r:f:t option ; do 
	case "$option"
	in
                S) G_SUBJECT=$OPTARG            
		   Gb_subjectSpecified=1	;;
                s) G_SURFACE=$OPTARG            
                   Gb_surfaceSpecified=1	;;
                h) G_HEMI=$OPTARG               
                   Gb_hemiSpecified=1		;;
		l) G_VERTEXLIST=$OPTARG         ;;
                f) G_VERTEXFILE=$OPTARG         ;;
		r) Gi_distance=$OPTARG          ;;
		t) Gb_terminateEngine=0         ;;
                v) Gi_verbose=$OPTARG           ;;
		\?) synopsis_show
                    shut_down 1                 ;;
	esac
done

verbosity_check
topDir=$(pwd)
echo ""
cprint  "hostname"      "[ $(hostname) ]"

REQUIREDFILES="SSocket_client dsh mris_pmake"
for file in $REQUIREDFILES ; do
        lprint "Checking for access to $file"
        file_checkOnPath $file || fatal fileCheck
done

VERTEXLIST=""
if [[ "$G_VERTEXFILE" != "-x" ]] ; then
        lprint  "Checking on <vertexFile>"
        fileExist_check $G_VERTEXFILE || fatal vertexFileCheck
        FILELIST=$(cat $G_VERTEXFILE)
        VERTEXLIST="$FILELIST "
fi

if [[ "$G_VERTEXLIST" != "-x" ]] ; then
        lprint "Adding specified vertices to list"
        VERTEXLIST="$VERTEXLIST $G_VERTEXLIST"
        ret_check $?
fi

if (( ! ${#VERTEXLIST} )) ; then fatal vertexList ; fi

if (( Gb_subjectSpecified )) ; then
    G_SUBJECTDIR="${SUBJECTS_DIR}/$G_SUBJECT"
    lprint "Checking on <subject> dir"
    dirExist_check $G_SUBJECTDIR $G_SUBJECTDIR || fatal subject
fi

if (( Gb_surfaceSpecified && Gb_hemiSpecified )) ; then
    lprint "Checking on <surface> file"
    G_SURFACEFILE="${G_SUBJECTDIR}/surf/${G_HEMI}.${G_SURFACE}"
    fileExist_check $G_SURFACEFILE $G_SURFACEFILE || fatal surface
fi

if (( Gi_distance == -1 )) ; then fatal distanceCheck ; fi

cprint "Radial distance"        "[ $Gi_distance mm ]"
cprint "Terminate engine"       "[ $Gb_terminateEngine ]"

#
# Generate the 'options.txt' file
if [[ ! -f "$G_OPTIONSFILE" ]] ; then optionsFile_create ; fi

# Check on values in options.txt file
SUBJECT_O=$(basename $(dirname $(dirname $(cat "$G_OPTIONSFILE" | grep surfaceFile | awk '{print $3}'))))
HEMI_O=$(basename $(cat "$G_OPTIONSFILE" | grep surfaceFile | awk '{print $3}') | awk -F \. '{print $1}')
SURFACE_O=$(basename $(cat "$G_OPTIONSFILE" | grep surfaceFile | awk '{print $3}') | awk -F \. '{print $2}')

# Check if any of the <subject>, <surface>, or <hemi> have been specified
# and if they are different from those in the options file.
if (( Gb_subjectSpecified )) ; then
    if [[ "$G_SUBJECT" != "$SUBJECT_O" ]] ; then
	optionsFile_askRegenerate "subject" || optionsFile_create
    fi
fi
if (( Gb_surfaceSpecified )) ; then
    if [[ "$G_SURFACE" != "$SURFACE_O" ]] ; then
	optionsFile_askRegenerate "surface" || optionsFile_create
    fi
fi
if (( Gb_hemiSpecified )) ; then
    if [[ "$G_HEMI" != "$HEMI_O" ]] ; then
	optionsFile_askRegenerate "hemi" || optionsFile_create
    fi
fi

#
# Comment out the 'b_exitOnDone' flag
lprint  "Editing b_exitOnDone"
sed -i.bak 's/^b_exitOnDone/#b_exitOnDone/' "$G_OPTIONSFILE"
ret_check $?

#
# Make sure the 'wd' weight is 1.0000
lprint "Editing the 'wd' weight"
sed -i.bak '/^wd /s/0\./1\./g' "$G_OPTIONSFILE"
ret_check $?

# Generate a set of dsh scripts about each vertex
#	and execute them
for vertex in $VERTEXLIST ; do
    lprint "Circle about vertex $vertex, radius $Gi_distance..."
    dshScript_generate $vertex $Gi_distance
    rprint "[ ok ]"
    lprint "Executing script..."
    dsh -s $DSHSCRIPT 2>/dev/null >/dev/null
    ret=$?
    ret_check $ret || fatal dshScript
    rm $DSHSCRIPT
done

# Clean up all the spawned processes
if (( Gb_terminateEngine )) ; then
	dsh -c "TERM" -q
fi
	
shut_down 0
